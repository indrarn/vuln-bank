---
name: DevSecOps Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: indrarn14/vuln-bank
  DOCKER_TAG: latest

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    outputs:
      secrets-found: ${{ steps.gitleaks.outputs.secrets-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check GitLeaks Results
        run: |
          if [ "${{ steps.gitleaks.outcome }}" == "failure" ]; then
            echo "secrets-found=true" >> $GITHUB_OUTPUT
            echo "üö® Secrets detected by GitLeaks!"
            exit 1
          else
            echo "secrets-found=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No secrets detected"
          fi

      - name: Upload GitLeaks Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-report
          path: results.sarif
          retention-days: 1

  snyk-sca:
    name: SCA - Snyk Dependency Scan
    runs-on: ubuntu-latest
    needs: secret-scanning
    if: needs.secret-scanning.result == 'success'
    outputs:
      vulnerabilities-found: ${{ steps.check-sca.outputs.vulnerabilities-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk SCA Scan
        id: snyk-scan
        run: |
          snyk test --severity-threshold=high \
            --json-file-output=snyk-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Process Snyk Results
        id: check-sca
        run: |
          if [ "${{ steps.snyk-scan.outcome }}" == "failure" ]; then
            echo "vulnerabilities-found=true" >> $GITHUB_OUTPUT
            echo "üö® High/Critical vulnerabilities found!"

            if [ -f snyk-report.json ]; then
              echo "üìã Vulnerability Summary:"
              jq -r '.vulnerabilities[]? |
                select(.severity == "high" or .severity == "critical") |
                "- \(.title) (\(.severity)): \(.packageName)@\(.version)"' \
                snyk-report.json | head -5
            fi

            echo "‚ö†Ô∏è Continuing deployment with vulnerabilities"
          else
            echo "vulnerabilities-found=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No high/critical vulnerabilities found"
          fi

      - name: Upload Snyk SCA Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-report
          path: snyk-report.json
          retention-days: 1

  snyk-sast:
    name: SAST - Snyk Code Analysis
    runs-on: ubuntu-latest
    needs: [secret-scanning, snyk-sca]
    if: |
      needs.secret-scanning.result == 'success' &&
      needs.snyk-sca.result == 'success'
    outputs:
      code-issues-found: ${{ steps.check-sast.outputs.code-issues-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk Code (SAST)
        id: snyk-code
        run: |
          snyk code test --severity-threshold=high \
            --json-file-output=snyk-code-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Process Snyk Code Results
        id: check-sast
        run: |
          if [ "${{ steps.snyk-code.outcome }}" == "failure" ]; then
            echo "code-issues-found=true" >> $GITHUB_OUTPUT
            echo "üö® High/Critical code vulnerabilities found!"

            if [ -f snyk-code-report.json ]; then
              echo "üìã Code Issues Summary:"
              jq -r '.runs[]?.results[]? |
                select(.level == "error" or .level == "warning") |
                "- " + (.message.text // "No message") +
                " (" + .level + "): " +
                (.locations[0].physicalLocation.artifactLocation.uri //
                "unknown") + ":" +
                (.locations[0].physicalLocation.region.startLine|tostring)' \
                snyk-code-report.json | head -5
            fi

            echo "‚ö†Ô∏è Continuing deployment with code issues"
          else
            echo "code-issues-found=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No high/critical code vulnerabilities found"
          fi

      - name: Upload Snyk Code Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-code-report
          path: snyk-code-report.json
          retention-days: 1

  docker-build-scan:
    name: Container Scan - Snyk
    runs-on: ubuntu-latest
    needs: [snyk-sast]
    if: needs.snyk-sast.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} .

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Scan Docker image with Snyk
        run: |
          snyk container test ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} \
            --severity-threshold=high \
            --file=Dockerfile \
            --json-file-output=snyk-container-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | \
            docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}

      - name: Upload Snyk Container Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-container-report
          path: snyk-container-report.json
          retention-days: 1

  deploy:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: [docker-build-scan]
    steps:
      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.REMOTE_PROJECT_PATH }}
            git pull origin main
            docker compose pull
            docker compose down
            docker compose up -d

  dast:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Application to be Ready
        run: |
          echo "‚è≥ Waiting for application to be ready..."
          TARGET_URL="http://${{ secrets.SSH_HOST }}:1400"

          for i in {1..30}; do
            if curl -f -s --max-time 10 "$TARGET_URL" > /dev/null 2>&1; then
              echo "‚úÖ Application is ready for DAST scanning"
              break
            fi
            echo "‚è≥ Waiting for application... attempt $i/30"
            sleep 10
          done

          if ! curl -f -s --max-time 10 "$TARGET_URL" > /dev/null 2>&1; then
            echo "‚ùå Application is not responding after 5 minutes"
            exit 1
          fi

          echo "üéØ Target URL: $TARGET_URL"

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://${{ secrets.SSH_HOST }}:1400"
          cmd_options: '-a -j -T 15'
          fail_action: false
        continue-on-error: true

      - name: Process ZAP Results
        if: always()
        run: |
          if [ -f report_html.html ]; then
            echo "üìä ZAP scan completed"

            # Check for high/critical issues
            if grep -q "High\|Critical" report_html.html; then
              echo "üö® High/Critical vulnerabilities found in DAST!"
              echo "‚ö†Ô∏è Review ZAP report for security issues"
            else
              echo "‚úÖ No critical vulnerabilities found in DAST"
            fi

            # Show summary
            echo "üìã DAST Summary:"
            echo "- Report generated: report_html.html"
            echo "- Target scanned: http://${{ secrets.SSH_HOST }}:1400"
          else
            echo "‚ùå ZAP report not generated"
          fi

      - name: Upload ZAP HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-html-report
          path: report_html.html
          retention-days: 1

      - name: Upload ZAP JSON Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-json-report
          path: report_json.json
          retention-days: 1

  security-reports:
    name: Upload Reports to FileBrowser
    runs-on: ubuntu-latest
    needs: [secret-scanning, snyk-sca, snyk-sast, docker-build-scan, dast]
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports

      - name: Create Simple Directory Structure
        run: |
          REPORT_DIR="devsecops_${{ github.sha }}"
          mkdir -p reports/$REPORT_DIR

          echo "üìä Creating reports for commit: ${{ github.sha }}"

          cd security-reports
          cp -r * ../reports/$REPORT_DIR/ 2>/dev/null || true

          echo "‚úÖ All artifacts copied to $REPORT_DIR"

      - name: Upload to FileBrowser
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_FB_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "reports/*"
          target: "/home/ubuntu/security-report/"
          strip_components: 1

      - name: Display Access Info
        run: |
          echo "## üìÇ Reports Uploaded!" >> $GITHUB_STEP_SUMMARY
          echo "**FileBrowser:** http://103.125.57.211:1410" >> $GITHUB_STEP_SUMMARY
          echo "**Path:** security-report/devsecops_${{ github.sha }}/" >> $GITHUB_STEP_SUMMARY

  notify:
    name: "üì¢ Security Analysis Summary & Notification"
    runs-on: ubuntu-latest
    needs: [secret-scanning, snyk-sca, snyk-sast, docker-build-scan, deploy, dast, security-reports]
    if: always()
    steps:
      - name: Download Security Reports for Analysis
        uses: actions/download-artifact@v4
        with:
          path: ./analysis-reports
        continue-on-error: true
  
      - name: Analyze Security Findings
        id: security-analysis
        run: |
          echo "üîç Analyzing security findings..."
  
          # Initialize counters
          SECRET_STATUS="‚úÖ Clean"
          SCA_CRITICAL=0
          SCA_HIGH=0
          SAST_CRITICAL=0
          SAST_HIGH=0
          DAST_CRITICAL=0
          DAST_HIGH=0
  
          # Analyze Secret Scanning
          if [ "${{ needs.secret-scanning.outputs.secrets-found }}" == "true" ]; then
            SECRET_STATUS="üö® Secrets Detected"
          fi
  
          # Analyze SCA Report
          if [ -f analysis-reports/snyk-report/snyk-report.json ]; then
            echo "üì¶ Analyzing SCA findings..."
            SCA_CRITICAL=$(jq '[.vulnerabilities[]? | select(.severity == "critical")] | length' analysis-reports/snyk-report/snyk-report.json 2>/dev/null || echo "0")
            SCA_HIGH=$(jq '[.vulnerabilities[]? | select(.severity == "high")] | length' analysis-reports/snyk-report/snyk-report.json 2>/dev/null || echo "0")
          fi
  
          # Analyze SAST Report
          if [ -f analysis-reports/snyk-code-report/snyk-code-report.json ]; then
            echo "üîí Analyzing SAST findings..."
            SAST_CRITICAL=$(jq '[.runs[]?.results[]? | select(.level == "error")] | length' analysis-reports/snyk-code-report/snyk-code-report.json 2>/dev/null || echo "0")
            SAST_HIGH=$(jq '[.runs[]?.results[]? | select(.level == "warning")] | length' analysis-reports/snyk-code-report/snyk-code-report.json 2>/dev/null || echo "0")
          fi
  
          # Analyze DAST Report
          DAST_STATUS="‚úÖ No Critical Issues"
          if [ -f analysis-reports/zap-json-report/report_json.json ]; then
            echo "üï∑Ô∏è Analyzing DAST findings..."
            if grep -q -i "sql injection\|xss\|csrf\|rce" analysis-reports/zap-html-report/report_html.html 2>/dev/null; then
              DAST_STATUS="üö® Critical Vulnerabilities Found"
              DAST_CRITICAL=1
            elif grep -q -i "high\|critical" analysis-reports/zap-html-report/report_html.html 2>/dev/null; then
              DAST_STATUS="‚ö†Ô∏è High Risk Issues"
              DAST_HIGH=1
            fi
          fi
  
          RISK_SCORE=0
          if [ "${{ needs.secret-scanning.outputs.secrets-found }}" == "true" ]; then
            RISK_SCORE=$((RISK_SCORE + 25))
          fi
          RISK_SCORE=$((RISK_SCORE + SCA_CRITICAL * 10 + SCA_HIGH * 5))
          RISK_SCORE=$((RISK_SCORE + SAST_CRITICAL * 8 + SAST_HIGH * 4))
          RISK_SCORE=$((RISK_SCORE + DAST_CRITICAL * 15 + DAST_HIGH * 7))
  
          if [ $RISK_SCORE -ge 50 ]; then
            OVERALL_STATUS="üî¥ HIGH RISK"
            RISK_EMOJI="üö®"
          elif [ $RISK_SCORE -ge 25 ]; then
            OVERALL_STATUS="üü° MEDIUM RISK"
            RISK_EMOJI="‚ö†Ô∏è"
          elif [ $RISK_SCORE -ge 10 ]; then
            OVERALL_STATUS="üü† LOW RISK"
            RISK_EMOJI="‚ö°"
          else
            OVERALL_STATUS="üü¢ MINIMAL RISK"
            RISK_EMOJI="‚úÖ"
          fi
  
          echo "secret_status=$SECRET_STATUS" >> $GITHUB_OUTPUT
          echo "sca_critical=$SCA_CRITICAL" >> $GITHUB_OUTPUT
          echo "sca_high=$SCA_HIGH" >> $GITHUB_OUTPUT
          echo "sast_critical=$SAST_CRITICAL" >> $GITHUB_OUTPUT
          echo "sast_high=$SAST_HIGH" >> $GITHUB_OUTPUT
          echo "dast_status=$DAST_STATUS" >> $GITHUB_OUTPUT
          echo "risk_score=$RISK_SCORE" >> $GITHUB_OUTPUT
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "risk_emoji=$RISK_EMOJI" >> $GITHUB_OUTPUT
  
          echo "üîç Analysis completed - Risk Score: $RISK_SCORE"

      - name: Send Telegram Notification
        run: |
          cat > telegram_message.txt << 'EOF'
          ${{ steps.security-analysis.outputs.risk_emoji }} DevSecOps Pipeline Report ${{ steps.security-analysis.outputs.risk_emoji }}

          üìä SECURITY SUMMARY
          ‚Ä¢ Overall Risk: ${{ steps.security-analysis.outputs.overall_status }}
          ‚Ä¢ SCA Critical: ${{ steps.security-analysis.outputs.sca_critical }}
          ‚Ä¢ SCA High: ${{ steps.security-analysis.outputs.sca_high }}
          ‚Ä¢ SAST High: ${{ steps.security-analysis.outputs.sast_high }}
          ‚Ä¢ DAST Status: ${{ steps.security-analysis.outputs.dast_status }}

          üì¶ IMAGE INFO
          ‚Ä¢ Name: ${{ env.DOCKER_IMAGE_NAME }}
          ‚Ä¢ Tag: ${{ env.DOCKER_TAG }}

          ‚úÖ Passed: ${{ steps.test.outputs.passed }}
          ‚ùå Failed: ${{ steps.test.outputs.failed }}
          EOF

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$(cat telegram_message.txt)" \
            -d parse_mode=Markdown

